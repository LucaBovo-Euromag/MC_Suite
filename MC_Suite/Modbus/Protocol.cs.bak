using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.IO.Ports;
using MC_Suite.Services;
using MC_Suite.Properties;
using Windows.UI.Popups;
using Windows.Devices.SerialCommunication;


namespace MC_Suite.Modbus
{
    public class Protocol
    {
        //public SerialPort sp = new SerialPort();
        public string modbusStatus;

        private static Protocol _instance;
        public static Protocol Instance
        {
            get
            {
                if (_instance == null)
                    _instance = new Protocol();
                return _instance;
            }
        }

        #region Constructor / Deconstructor
        public Protocol()
        {
        }
        ~Protocol()
        {
        }
        #endregion
        public enum ModBus_Exception_Codes
        {
            ILLEGAL_FUNCTION = 1,       //The function code received in the query is not an allowable action for the server (or slave). This
                                        //may be because the function code is only applicable to newer devices, and was not
                                        //implemented in the unit selected. It could also indicate that the server (or slave) is in the wrong
                                        //state to process a request of this type, for example because it is unconfigured and is being
                                        //asked to return register values.

            ILLEGAL_DATA_ADDRESS = 2,   //The data address received in the query is not an allowable address for the server (or slave). More
                                        //specifically, the combination of reference number and transfer length is invalid. For a controller with
                                        //100 registers, the PDU addresses the first register as 0, and the last one as 99. If a request
                                        //is submitted with a starting register address of 96 and a quantity of registers of 4, then this request
                                        //will successfully operate (address-wise at least) on registers 96, 97, 98, 99. If a request is
                                        //submitted with a starting register address of 96 and a quantity of registers of 5, then this request
                                        //will fail with Exception Code 0x02 “Illegal Data Address” since it attempts to operate on registers
                                        //96, 97, 98, 99 and 100, and there is no register with address 100.

            ILLEGAL_DATA_VALUE = 3,     //A value contained in the query data field is not an allowable value for server (or slave). This
                                        //indicates a fault in the structure of the remainder of a complex request, such as that the implied
                                        //length is incorrect. It specifically does NOT mean that a data item submitted for storage in a register
                                        //has a value outside the expectation of the application program, since the MODBUS protocol
                                        //is unaware of the significance of any particular value of any particular register.

            SLAVE_DEVICE_FAILURE = 4,   //An unrecoverable error occurred while the server (or slave) was attempting to perform the requested action.

            ACKNOWLEDGE = 5,            //Specialized use in conjunction with programming commands.
                                        //The server (or slave) has accepted the request and is processing it, but a long duration of time
                                        //will be required to do so. This response is returned to prevent a timeout error from occurring
                                        //in the client (or master). The client (or master) can next issue a Poll Program Complete message
                                        //to determine if processing is completed.

            SLAVE_DEVICE_BUSY = 6,      //Specialized use in conjunction with programming commands.
                                        //The server (or slave) is engaged in processing a long–duration program command. The client (or
                                        //master) should retransmit the message later when the server (or slave) is free.
 
            MEMORY_PARITY_ERROR = 8,    //Specialized use in conjunction with function codes 20 and 21 and reference type 6, to indicate that
                                        //the extended file area failed to pass a consistency check.
                                        //The server (or slave) attempted to read record file, but detected a parity error in the memory.
                                        //The client (or master) can retry the request, but service may be required on the server (or slave) device.

            GATEWAY_PATH_UNAVAILABLE = 0x0A,// Specialized use in conjunction with gateways,indicates that the gateway was unable to allocate
                                            //an internal communication path from the input
                                            //port to the output port for processing the request.
                                            //Usually means that the gateway is misconfigured
                                            //or overloaded.

             GATEWAY_TARGET_DEVICE = 0x0B   //FAILED TO RESPOND
                                            //Specialized use in conjunction with gateways,
                                            //indicates that no response was obtained from the
                                            //target device. Usually means that the device is
                                            //not present on the network.
        
        }


        #region Open / Close Procedures

        public MbCOMPortManager MbConnection
        {
            get
            {
                return MbCOMPortManager.Instance;
            }
        }

        public async Task<bool> Open()
        {
            if (await MbConnection.Open())
                return MbConnection.IsOpen;
            else
                return false;
        }

        public bool Close()
        {
           return MbConnection.Close();
        }

        #endregion

        
        #region CRC Computation
        private void GetCRC(byte[] message, ref byte[] CRC)
        {
            //Function expects a modbus message of any length as well as a 2 byte CRC array in which to 
            //return the CRC values:

            ushort CRCFull = 0xFFFF;
            byte CRCHigh = 0xFF, CRCLow = 0xFF;
            char CRCLSB;

            for (int i = 0; i < (message.Length) - 2; i++)
            {
                CRCFull = (ushort)(CRCFull ^ message[i]);

                for (int j = 0; j < 8; j++)
                {
                    CRCLSB = (char)(CRCFull & 0x0001);
                    CRCFull = (ushort)((CRCFull >> 1) & 0x7FFF);

                    if (CRCLSB == 1)
                        CRCFull = (ushort)(CRCFull ^ 0xA001);
                }
            }
            CRC[1] = CRCHigh = (byte)((CRCFull >> 8) & 0xFF);
            CRC[0] = CRCLow = (byte)(CRCFull & 0xFF);
        }
        #endregion

        #region Build Message
        private void BuildMessage(byte address, byte type, ushort start, ushort registers, ref byte[] message)
        {
            //Array to receive CRC bytes:
            byte[] CRC = new byte[2];

            message[0] = address;
            message[1] = type;
            message[2] = (byte)(start >> 8);
            message[3] = (byte)start;
            message[4] = (byte)(registers >> 8);
            message[5] = (byte)registers;

            GetCRC(message, ref CRC);
            message[message.Length - 2] = CRC[0];
            message[message.Length - 1] = CRC[1];
        }
        #endregion

        #region Check Response
        public bool CheckResponse(byte[] response)
        {
            //Perform a basic CRC check:
            byte[] CRC = new byte[2];
            GetCRC(response, ref CRC);
            if (CRC[0] == response[response.Length - 2] && CRC[1] == response[response.Length - 1])
                return true;
            else
                return false;
        }
        #endregion

        #region Get Response
        private bool GetResponse(ref byte[] response)
        {
            //There is a bug in .Net 2.0 DataReceived Event that prevents people from using this
            //event as an interrupt to handle data (it doesn't fire all of the time).  Therefore
            //we have to use the ReadByte command for a fixed length as it's been shown to be reliable.

            response = MbConnection.portHandler.decodeData(response.Length).ToArray();

            for (int i = 0; i < response.Length; i++)
            {
                if ((i >=4) && (response[1] >= 0x80)) // se ho un messaggio di errore come risposta 0x80+cmd, error code
                {
                    Array.Resize<byte>(ref response, 5);
                    return false;
                }
            }
            return true;
        }
        #endregion

        #region Function 16 - Write Multiple Registers

        public async Task<bool> SendFc16(byte address, ushort start, ushort registers, ushort[] values)
        {
            if (!MbConnection.IsOpen)
            {
                await MbConnection.Open();

                //Message is 1 addr + 1 fcn + 2 start + 2 reg + 1 count + 2 * reg vals + 2 CRC
                byte[] message = new byte[9 + 2 * registers];
                //Function 16 response is fixed at 8 bytes
                byte[] response = new byte[8];

                //Add bytecount to message:
                message[6] = (byte)(registers * 2);
                //Put write values into message prior to sending:
                for (int i = 0; i < registers; i++)
                {
                    message[7 + 2 * i] = (byte)(values[i] >> 8);
                    message[8 + 2 * i] = (byte)(values[i]);
                }
                //Build outgoing message:
                BuildMessage(address, (byte)16, start, registers, ref message);
                
                //Send Modbus message to Serial Port:
                try
                {
                    List<byte> MessageList = message.OfType<byte>().ToList();

                    MbConnection.portHandler.sendData(MessageList);

                    if( await MbConnection.portHandler.receiveData( Services.SerialPort.ReadMode.ModbusMode ) )
                    { 
                        if (!GetResponse(ref response))
                        {
                            if (CheckResponse(response))
                                modbusStatus = "Error in write event: " + response[2].ToString();

                            MbConnection.Close();
                            return false;
                        }
                    }

                }
                catch (Exception err)
                {
                    modbusStatus = "Error in write event: " + response[2].ToString() + err.Message;
                    MbConnection.Close();
                    return false;
                }
                //Evaluate message:
                if (CheckResponse(response))
                {
                    modbusStatus = "Write successful";
                    MbConnection.Close();
                    return true;
                }
                else
                {
                    modbusStatus = "CRC error";
                    MbConnection.Close();
                    return false;
                }
            }
            else
            {
                modbusStatus = "Serial port Buisy";
                return false;
            }
        }
        #endregion

        #region Function 3_4 - Read Registers
        /// <summary>
        /// INVIO comando 03 lettura registri
        /// </summary>
        /// <param name="address">Indirizzo del dispositivo</param>
        /// <param name="start">Indirizzo di partenza</param>
        /// <param name="registers">numero di registri da leggere</param>
        /// <param name="values">out lettura</param>
        /// <returns>valori short</returns>
        public async Task<ushort[]> SendFc(byte address,byte command, ushort start, ushort registers)
        {
            ushort[] values;

            if (MbConnection.IsOpen)
            {
                byte[] message = new byte[8];
                byte[] response = new byte[5 + 2 * registers];
                BuildMessage(address, command, start, registers, ref message);
                try
                {
                    List<byte> MessageList = message.OfType<byte>().ToList();

                    MbConnection.portHandler.sendData(MessageList);

                    if( await MbConnection.portHandler.receiveData(Services.SerialPort.ReadMode.ModbusMode) )
                    { 
                        if (!GetResponse(ref response))
                        {
                            modbusStatus = "Error in read event: " + response[2].ToString();                            
                            return null;
                        }
                    }
                }
                catch (Exception err)
                {
                    modbusStatus = "Read error: " + err.Message;                    
                    return null;
                }

                if (CheckResponse(response))
                {
                    values = new ushort[response.Length];
                    for (int i = 0; i < (response.Length - 5) / 2; i++)
                    {
                        values[i] = response[2 * i + 3];
                        values[i] <<= 8;
                        values[i] += response[2 * i + 4];
                    }
                    modbusStatus = "Read successful";                    
                    return values;
                }
                else
                {
                    modbusStatus = "CRC error";                    
                    return null;
                }
            }
            else
            {
                modbusStatus = "Serial port is Closed";
                return null;
            }
        }
        #endregion

        #region Function 20 - Lettura flash DataLogger ** fuori standard modbus **

        /// <summary>
        /// Lettura DataLogger MC608_6
        /// </summary>
        /// <param name="address">Indirizzo del dispositivo</param>
        /// <param name="start_row_x10">Riga di partenza multiplo di 10</param>
        /// <returns>True se esito trasmissione OK</returns>
        public async Task<bool> SendFc20(byte address, ushort start_row_x10)
        {
            if (!MbConnection.IsOpen)
            {
                try
                {
                    await MbConnection.Open();
                    byte[] message = new byte[8];
                    BuildMessage(address, (byte)20, start_row_x10, (ushort)(start_row_x10 + 10), ref message); // message contiene la sequenza di byte
                    
                    List<byte> MessageList = message.OfType<byte>().ToList();
                    MbConnection.portHandler.sendData(MessageList);
                    MbConnection.Close();
                    return true;

                }
                catch (Exception err)
                {
                    modbusStatus = "Read error: " + err.Message;
                    MbConnection.Close();
                    return false;
                }
 
            }
            else
            {
                modbusStatus = "Serial port is Buisy";
                return false;
            }

        }
        /// <summary>
        /// INVIO comando 20 lettura flash log, pagine da 528byte
        /// </summary>
        /// <param name="address">Indirizzo del dispositivo</param>
        /// <param name="start">Pagina di partenza</param>
        /// <param name="n_page">numero di pagine da leggere</param>
        /// <param name="values">out lettura</param>
        /// <returns>valori short</returns>
        public bool SendFc20(byte address, ushort start, ushort n_page)
        {
            //Ensure port is open:
            if (MbConnection.IsOpen)
            {
                try
                {
                    //sp.DiscardOutBuffer();
                    //sp.DiscardInBuffer();
                    byte[] message = new byte[8];
                    BuildMessage(address, (byte)20, start, n_page, ref message); // message contiene la sequenza di byte
                    List<byte> MessageList = message.OfType<byte>().ToList();
                    MbConnection.portHandler.sendData(MessageList);
                    return true;

                }
                catch (Exception err)
                {
                    modbusStatus = "Read error: " + err.Message;
                    return false;
                }
 
            }
            else
            {
                modbusStatus = "Serial port not open";
                return false;
            }

        }

        #endregion
    }
}
