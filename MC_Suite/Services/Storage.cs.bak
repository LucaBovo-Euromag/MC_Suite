using System;
using System.ComponentModel;
using System.IO;
using System.Runtime.Serialization;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Windows.Storage;
using MC_Suite.Euromag.Protocols.StdCommands;
using System.Collections.ObjectModel;


namespace MC_Suite.Services
{
    public class Storage
    {
        private static Storage _instance;
        public static Storage Instance
        {
            get
            {
                if (_instance == null)
                    _instance = new Storage();
                return _instance;
            }
        }

        public VariableImage GetVariableParams(IEEPROMvariable ParToSave, UInt32 Value)
        {
            VariableImage LocalVar = new VariableImage();
            LocalVar.Address = ParToSave.Address;
            LocalVar.Size = ParToSave.Size;
            LocalVar.DataType = ParToSave.DataType;
            LocalVar.Name = ParToSave.Name;
            LocalVar.ValAsString = ParToSave.ValAsString;
            LocalVar.Value = Value;
            return LocalVar;
        }

        public async void UpdateFileList()
        {
            this.CfgFileList.Clear();
            this.CfgFiles.Clear();

            this.CfgFileList = await SerializableStorage<FileInfo>.Load(this.FileInfo, ApplicationData.Current.LocalFolder);
            this.CfgFileList.ForEach(p => this.CfgFiles.Add(p));
        }

        private string _savedFileName;
        public string SavedFileName
        {
            get { return _savedFileName; }
            set
            {
                if (value != _savedFileName)
                {
                    _savedFileName = value;
                    OnPropertyChanged("SavedFileName");
                }
            }
        }

        public string FileInfo
        {
            get { return "FileInfo.cfg"; }
        }

        private StorageFolder _currentFolder;
        public StorageFolder CurrentFolder
        {
            get { return _currentFolder; }
            set
            {
                if (value != _currentFolder)
                {
                    _currentFolder = value;
                    OnPropertyChanged("CurrentFolder");
                }
            }
        }

        private string _currentFolderTxt;
        public string CurrentFolderTxt
        {
            get { return _currentFolderTxt; }
            set
            {
                if (value != _currentFolderTxt)
                {
                    _currentFolderTxt = value;
                    OnPropertyChanged("CurrentFolderTxt");
                }
            }
        }

        private Dictionary<int, string> _fileCollection;
        public Dictionary<int, string> FileCollection
        {
            get {
                if(_fileCollection == null)
                {
                    _fileCollection = new Dictionary<int, string>();
                }
                return _fileCollection;
            }
            set
            {
                if (value != _fileCollection)
                {
                    _fileCollection = value;
                    OnPropertyChanged("FileCollection");
                }
            }
        }

        public List<FileInfo> CfgFileList = new List<FileInfo>();
        public ObservableCollection<FileInfo> CfgFiles = new ObservableCollection<FileInfo>();

        #region ObservableObject

        private void RaisePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void Set<T>(ref T storage, T value, [CallerMemberName]string propertyName = null)
        {
            if (Equals(storage, value))
            {
                return;
            }

            storage = value;
            OnPropertyChanged(propertyName);
        }

        private void OnPropertyChanged(string propertyName) => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));

        #endregion

    }

    public class VariableImage
    {
        public EEPROMAddresses Address;
        public TargetDataType DataType;
        public string Name;
        public string ValAsString;
        public int Size;
        public UInt32 Value;
    }

    public class FileInfo
    {
        public string Name { get; set; }
        public DateTime Date { get; set; }
        public string Path { get; set; }
    }

    /// <summary>
    /// Provides functions to save and load single object as well as List of 'T' using serialization
    /// </summary>
    /// <typeparam name="T">Type parameter to be serialize</typeparam>
    public static class SerializableStorage<T> where T : new()
    {
        public static async void Save(string FileName, Windows.Storage.StorageFolder Folder, List<T> _Data)
        {
            MemoryStream _MemoryStream = new MemoryStream();
            DataContractSerializer Serializer = new DataContractSerializer(typeof(List<T>));
            Serializer.WriteObject(_MemoryStream, _Data);

            Task.WaitAll();

            StorageFile _File = await Folder.CreateFileAsync(FileName, CreationCollisionOption.ReplaceExisting);            

            using (Stream fileStream = await _File.OpenStreamForWriteAsync())
            {
                _MemoryStream.Seek(0, SeekOrigin.Begin);
                await _MemoryStream.CopyToAsync(fileStream);
                await fileStream.FlushAsync();
                fileStream.Dispose();
            }
        }
        

        public static async Task<List<T>> Load(string FileName, Windows.Storage.StorageFolder Folder)
        {            
            StorageFile _File;
            List<T> Result;

            try
            {
                Task.WaitAll();
                _File = await Folder.GetFileAsync(FileName);

                using (Stream stream = await _File.OpenStreamForReadAsync())
                {
                    DataContractSerializer Serializer = new DataContractSerializer(typeof(List<T>));

                    Result = (List<T>)Serializer.ReadObject(stream);                    
                }
                return Result;
            }
            catch (Exception ex)
            {
                return new List<T>();
            }
        }
    }
}
